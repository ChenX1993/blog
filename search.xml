<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[AWS]]></title>
    <url>%2F2019%2F07%2F19%2FAWS%2F</url>
    <content type="text"><![CDATA[S3Disable “delete” option for S3 objects in AWS Attach policy to your IAM user(s) that Deny s3:DeleteObject action Configure bucket policy (Permissions -&gt; Bucket Policy) that will Deny s3:DeleteObject actionFor example, bucket policy can look like this: 12345678910111213&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Id&quot;: &quot;&lt;...&gt;&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Deny&quot;, &quot;Principal&quot;: &quot;*&quot;, &quot;Action&quot;: &quot;s3:DeleteObject&quot;, &quot;Resource&quot;: &quot;arn:aws:s3:::&lt;YOUR BUCKET NAME&gt;/*&quot; &#125;, &lt;...&gt; ]&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[python3]]></title>
    <url>%2F2019%2F05%2F31%2Fpython3%2F</url>
    <content type="text"><![CDATA[Compression1. compress12345import zlib...zlib.compress(str.encode(&quot;utf-8&quot;))// compress requires byte 2. decompress1234import zlib...zlib.compress(byte).decode(&quot;utf-8&quot;) 3. Dynamodb Binary12345from boto3.dynamodb.types import Binary# dynamodb.Binary Obj has attr: valueif isinstance(Item[column_name], Binary): box_plot_str = zlib.decompress(Item[column_name].column.value).decode(&quot;utf-8&quot;) Jsonjson -&gt; str 1json.dumps() str -&gt; json 1json.loads() File123file.open(&apos;sample.txt&apos;, &apos;w&apos;)file.write()file.close() Decorator123456789def log(func): def wrapper(*args, **kw): print(&apos;call %s():&apos; % func.__name__) return func(*args, **kw) return wrapper @logdef now(): print(&apos;2015-3-25&apos;)]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSS:绘制矩形、圆角矩形、圆形、椭圆形、三角形、弧]]></title>
    <url>%2F2019%2F01%2F17%2Fcss-shapes%2F</url>
    <content type="text"><![CDATA[Demo: https://codepen.io/xc454981894/pen/oJROBZ 1.矩形绘制矩形应该是最简单的了，直接设置div的宽和高，填充颜色，效果就出来了。 2.圆角矩形绘制圆角矩形也很简单，在1的基础上，在使用css3的border-radius，即可。 3.圆根据圆的特性，在2的基础上，设置div的宽和高一直，为正方形，然后设置border-radius为50%即可。 4.椭圆椭圆也很简单了，只需要在3的基础上，让div的宽和高不一致即可。为了更好看，建议宽设置为高的1.5倍。 5.三角形三角形相对其他来说，就有点难了。这里我们要用到border-style属性在配合分别设置四个边的border的宽度来实现。最终效果见下面的代码。 6.弧本质上是利用圆角来实现，现在需要把矩形的左上角的圆角绘制成弧形，那么把右边和底边border的宽度设成0px，让他们不可见，设置左上角圆角的半径，让其变大，看得明显些，其余的圆角半径全都设成0px，这样一个弧形就完成了。 7.平行四边形平行四边形是在矩形的基础上运用了一个CSS3的transform属性。使用了变形效果。 8.六角星六角星是使用了一个“:after”制作了另一个反方向的三角形，在定位层叠到一起，从而形成六角星，说白一点就是两个三角拼在一起变成了六角星。 9.五角星五角星主要也是使用了CSS3的transform属性，并配合“:after”来使用。 10.心形、阴阳图、Point Burst、仿微信消息框、Pac-Man等Code123456789101112131415161718192021222324252627282930&lt;!-- 绘制矩形 --&gt;&lt;div class=&quot;rectangle&quot;&gt;&lt;/div&gt;&lt;!-- 绘制圆角矩形 --&gt;&lt;div class=&apos;rounded-rectangle&apos;&gt;&lt;/div&gt;&lt;!-- 绘制圆 --&gt;&lt;div class=&apos;circle&apos;&gt;&lt;/div&gt;&lt;!-- 绘制椭圆 --&gt;&lt;div class=&apos;ellipse&apos;&gt;&lt;/div&gt;&lt;!-- 绘制三角形 --&gt;&lt;div class=&apos;triangle&apos;&gt;&lt;/div&gt;&lt;!-- 绘制直线 --&gt;&lt;div class=&apos;line&apos;&gt;&lt;/div&gt;&lt;!-- 绘制弧 --&gt;&lt;div class=&apos;arc&apos;&gt;&lt;/div&gt;&lt;!-- 绘制平行四边形 --&gt;&lt;div class=&apos;parallelogram&apos;&gt;&lt;/div&gt;&lt;!-- 绘制6角星 --&gt;&lt;div class=&apos;star-six&apos;&gt;&lt;/div&gt;&lt;!-- 绘制五角星 --&gt;&lt;div class=&apos;star-five&apos;&gt;&lt;/div&gt;&lt;!-- 绘制心形 --&gt;&lt;div class=&apos;heart&apos;&gt;&lt;/div&gt;&lt;!-- 绘制pac-man --&gt;&lt;div class=&apos;pac-man&apos;&gt;&lt;/div&gt;&lt;!-- 绘制微信消息框 --&gt;&lt;div class=&apos;talkbubble&apos;&gt;&lt;/div&gt;&lt;!-- 绘制Point Burst --&gt;&lt;div class=&apos;burst-12&apos;&gt;&lt;/div&gt;&lt;br/&gt;&lt;!-- 绘制阴阳图 --&gt;&lt;div class=&apos;yin-yang&apos;&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307.rectangle &#123; width: 150px; height: 100px; background-color: orangered; margin-bottom: 5px;&#125;.rounded-rectangle &#123; width: 150px; height: 100px; background-color: orangered; border-radius: 10%; margin-bottom: 5px;&#125;.circle &#123; width: 100px; height: 100px; background-color: orangered; border-radius: 50%; margin-bottom: 5px;&#125;.ellipse &#123; width: 150px; height: 100px; background-color: orangered; border-radius: 50%; margin-bottom: 5px;&#125;.triangle &#123; width: 0px; height: 0px; border-style: solid; background-color: transparent; border-top-color: transparent; border-right-color: transparent; border-bottom-color: blue; border-left-color: transparent; border-top-width: 50px; border-bottom-width: 50px; border-left-width: 50px; border-right-width: 50px; margin-bottom: 5px;&#125;.line &#123; width: 100px; height: 3px; background-color: orangered; margin-bottom: 5px;&#125;.arc &#123; width: 100px; height: 100px; border-style: solid; border-top-width: 10px; border-bottom-width: 0px; border-left-width: 10px; border-right-width: 0px; border-top-color: blue; border-bottom-color: red; border-left-color: red; border-right-color: red; background-color: transparent; border-top-right-radius: 0px; border-top-left-radius: 100px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;&#125;.parallelogram &#123; width: 150px; height: 100px; -webkit-transform: skew(20deg); -moz-transform: skew(20deg); -o-transform: skew(20deg); transform: skew(20deg); background: red; margin-top: 20px; margin-left: 20px;&#125;.star-six &#123; width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid red; position: relative;&#125;.star-six:after &#123; width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 100px solid red; position: absolute; content: &quot;&quot;; top: 30px; left: -50px;&#125;.star-five &#123; margin: 50px 0; position: relative; display: block; color: red; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid red; border-left: 100px solid transparent; -moz-transform: rotate(35deg); -webkit-transform: rotate(35deg); -ms-transform: rotate(35deg); -o-transform: rotate(35deg); transform: rotate(35deg);&#125;.star-five:before &#123; border-bottom: 80px solid red; border-left: 30px solid transparent; border-right: 30px solid transparent; position: absolute; height: 0; width: 0; top: -45px; left: -65px; display: block; content: &apos;&apos;; -webkit-transform: rotate(-35deg); -moz-transform: rotate(-35deg); -ms-transform: rotate(-35deg); -o-transform: rotate(-35deg); transform: rotate(-35deg);&#125;.star-five:after &#123; position: absolute; display: block; color: red; top: 3px; left: -105px; width: 0px; height: 0px; border-right: 100px solid transparent; border-bottom: 70px solid red; border-left: 100px solid transparent; -webkit-transform: rotate(-70deg); -moz-transform: rotate(-70deg); -ms-transform: rotate(-70deg); -o-transform: rotate(-70deg); transform: rotate(-70deg); content: &apos;&apos;;&#125;.heart &#123; width: 160px; height: 200px; position: relative&#125;.heart:before &#123; content: &quot; &quot;; border: 0 solid transparent; -moz-border-radius: 100px; -webkit-border-radius: 100px; border-radius: 100px 100px 0 0; width: 80px; height: 120px; background: #669; -moz-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -o-transform: rotate(-45deg); -webkit-transform: rotate(-45deg); position: absolute; left: 20px;&#125;.heart:after &#123; content: &quot; &quot;; border: 0 solid transparent; -moz-border-radius: 100px; -webkit-border-radius: 100px; border-radius: 100px 100px 0 0; width: 80px; height: 120px; background: #669; -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); -webkit-transform: rotate(45deg); position: absolute; left: 48px; top: 0px;&#125;.pac-man &#123; width: 0px; height: 0px; border: 60px solid red; border-color: red transparent red red; -moz-border-radius: 60px; -webkit-border-radius: 60px; border-radius: 60px;&#125;.talkbubble &#123; width: 120px; height: 80px; background: red; position: relative; -moz-border-radius: 10px; -webkit-border-radius: 10px; border-radius: 10px; margin-left: 20px; margin-bottom: 20px;&#125;.talkbubble:before &#123; content: &quot;&quot;; position: absolute; right: 100%; top: 26px; width: 0; height: 0; border-top: 13px solid transparent; border-right: 26px solid red; border-bottom: 13px solid transparent; margin-left: 20px; margin-bottom: 20px;&#125;.burst-12 &#123; background: red; width: 80px; height: 80px; position: relative; text-align: center; margin-left: 20px;&#125;.burst-12:before,.burst-12:after &#123; content: &quot;&quot;; position: absolute; top: 0; left: 0; height: 80px; width: 80px; background: red;&#125;.burst-12:before &#123; -webkit-transform: rotate(30deg); -moz-transform: rotate(30deg); -ms-transform: rotate(30deg); -o-transform: rotate(30deg); transform: rotate(30deg);&#125;.burst-12:after &#123; -webkit-transform: rotate(60deg); -moz-transform: rotate(60deg); -ms-transform: rotate(60deg); -o-transform: rotate(60deg); transform: rotate(60deg);&#125;.yin-yang &#123; width: 96px; height: 48px; background: #eee; border-color: red; border-style: solid; border-width: 2px 2px 50px 2px; border-radius: 100%; position: relative;&#125;.yin-yang:before &#123; content: &quot;&quot;; position: absolute; top: 50%; left: 0; background: #eee; border: 18px solid red; border-radius: 100%; width: 12px; height: 12px;&#125;.yin-yang:after &#123; content: &quot;&quot;; position: absolute; top: 50%; left: 50%; background: red; border: 18px solid #eee; border-radius: 100%; width: 12px; height: 12px;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Scrapy]]></title>
    <url>%2F2019%2F01%2F17%2FScrapy%2F</url>
    <content type="text"><![CDATA[pip3 listhttps://doc.scrapy.org/en/latest/intro/tutorial.html Create a projectscrapy startproject tutorial This will create a tutorial directory with the following contents: 12345678910111213141516tutorial/ scrapy.cfg # deploy configuration file tutorial/ # project&apos;s Python module, you&apos;ll import your code from here __init__.py items.py # project items definition file middlewares.py # project middlewares file pipelines.py # project pipelines file settings.py # project settings file spiders/ # a directory where you&apos;ll later put your spiders __init__.py How to run our spiderscrapy crawl quotes]]></content>
  </entry>
  <entry>
    <title><![CDATA[bash_profile, bashrc与zshrc的区别]]></title>
    <url>%2F2019%2F01%2F17%2Fbash-profile-bashrc%E4%B8%8Ezshrc%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[看教程的时候，经常能看到需要在这三个文件上读写。那么这三个文件是干什么的，以及有什么区别呢？ 这三个文件都是用来设置用户工作环境的文件。它们都是终端启动时默认运行的文件。只不过他们稍有区别。 Login Shell: 输入密码进入终端的shell环境叫做Login Shell，如ssh远程登录no-Login Shell: 普通双击打开终端成为no-Login Shell, 但是在Mac中，系统都会默认给Login Shell。 bash_profile: 专门用于Login Shell里的 bashrc: 专门用于no-Login Shell里的 zshrc: 装了oh-my-zsh之后，启动时会运行zshrc而不是上面两个文件。另外它和Login Shell与no-Login Shell都没有关系，不管什么shell都会运行。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux Commands]]></title>
    <url>%2F2019%2F01%2F16%2FLinux-commands%2F</url>
    <content type="text"><![CDATA[文件操作:ls -a : 显示全部文件 -l : 详情显示 组合命令 mkdir -p 参数 cd 上下级目录 rm• 删除文件• 删除文件夹• 删除当前目录下所有文件 mvcpcat 显示内容 导入文件 追加如文件 sudo 作用 command not found git clone 从github上clone一个repo到本地 进阶grep 搜索文件内容 搜索前一个命令输出 ifconfig 找到ip lsof lsof -i tcp:5000 shell 脚本编写 执行权限 服务器交互wgetscp 下载文件 scp user@ip:server_path local_path 下载目录 scp -r user@ip:server_path local_path 上传文件 scp local_path user@ip:server_path 测试远程端口telnet [ip] [端口]本机测试 netstat –aupnt | grep 端口号]]></content>
  </entry>
  <entry>
    <title><![CDATA[React]]></title>
    <url>%2F2019%2F01%2F14%2FReact%2F</url>
    <content type="text"><![CDATA[123$ create-react-app my-app$ cd my-app/$ npm start Deploymentnpm run build Static Server:12npm install -g serveserve -s build Integrate Bootstrap123npm install bootstrapimport &quot;bootstrap/dist/css/bootstrap.css&quot;; React Plugin for Visual Studio Code Simple React Snippets Prettier - Code formatter React计时器计时器要在componentDidMount生命周期方法挂上，然后在componentWillUnmount生命周期方法清除。下面是ES6(Class)的语法范例:12345678910111213141516171819202122232425262728class Timer extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123;secondsElapsed: 0&#125;; &#125; tick() &#123; this.setState((prevState) =&gt; (&#123; secondsElapsed: prevState.secondsElapsed + 1 &#125;)); &#125; componentDidMount() &#123; this.interval = setInterval(() =&gt; this.tick(), 1000); &#125; componentWillUnmount() &#123; clearInterval(this.interval); &#125; render() &#123; return ( &lt;div&gt;Seconds Elapsed: &#123;this.state.secondsElapsed&#125;&lt;/div&gt; ); &#125;&#125;ReactDOM.render(&lt;Timer /&gt;, mountNode);]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mac Plugin]]></title>
    <url>%2F2019%2F01%2F14%2FMac-Plugin%2F</url>
    <content type="text"><![CDATA[Tuxera NTFS scroll reverser 系统助手 MPV播放器]]></content>
  </entry>
  <entry>
    <title><![CDATA[Flask]]></title>
    <url>%2F2019%2F01%2F14%2FFlask%2F</url>
    <content type="text"><![CDATA[Run sever1FLASK_APP=manage.py FLASK_ENV=development flask run 项目结构1234567891011121314151617181920|- projectName |- app //程序包 |- templates //jinjia2模板 |- static //css,js 图片等静态文件 |- main //py程序包 ，可以有多个这种包，每个对应不同的功能 |- __init__.py |- errors.py |- forms.py |- views.py |- __init__.py |- email.py //邮件处理程序 |- models.py //数据库模型 |- migrations //数据迁移文件夹 |- tests //单元测试 |- __init__.py |- test*.py //单元测试程序，可以包含多个对应不同的功能点测试 |- venv //虚拟环境 |- requirements.txt //列出了所有依赖包以及版本号，方便在其他位置生成相同的虚拟环境以及依赖 |- config.py //全局配置文件，配置全局变量 |- manage.py //启动程序 Virtualenv安装Librarypip3 install virtualenv 创建虚拟环境mkdir myprojectpython3 -m venv venv 激活虚拟环境. venv/bin/activate 安装Flaskpip install Flask 退出虚拟环境deactivate 安装依赖生成requirements.txtpip freeze &gt; requirements.txt 安装requirements.txt依赖pip install -r requirements.txt 异步任务在Flask中使用简单异步任务123456789101112131415161718192021222324252627282930from flask import Flaskfrom time import sleepfrom concurrent.futures import ThreadPoolExecutorexecutor = ThreadPoolExecutor(2)app = Flask(__name__)@app.route(&apos;/jobs&apos;)def run_jobs(): executor.submit(some_long_task1) executor.submit(some_long_task2, &apos;hello&apos;, 123) return &apos;Two jobs was launched in background!&apos;def some_long_task1(): print(&quot;Task #1 started!&quot;) sleep(10) print(&quot;Task #1 is done!&quot;)def some_long_task2(arg1, arg2): print(&quot;Task #2 started with args: %s %s!&quot; % (arg1, arg2)) sleep(5) print(&quot;Task #2 is done!&quot;)if __name__ == &apos;__main__&apos;: app.run() os命令Download folder123456def get_download_folder(): &quot;&quot;&quot; Get mac downloads folder &quot;&quot;&quot; home = os.path.expanduser(&quot;~&quot;) return os.path.join(home, &quot;Downloads&quot;) Usernameos.getlogin()]]></content>
  </entry>
  <entry>
    <title><![CDATA[Certificate]]></title>
    <url>%2F2019%2F01%2F14%2FCertificate%2F</url>
    <content type="text"><![CDATA[iOS/Mac 设备（系统）使用 App Provisioning Profile（Code Signing Identity）中的开发证书来判断App的合法性： 若用证书公钥能成功解密出 App（executable bundle）的内容摘要（_CodeSignature），证明此 App 确乃认证开发者发布，即来源可信； 再对 App（executable bundle）本身使用哈希算法计算摘要，若与上一步得到的摘要一致，则证明此 App 未被篡改过，即内容完整。 CSR: Certificate Signing RequestOnly Certificates: .p7b or .cer or .pem file If Keychain Access shows a certificate in your personal keychain, but it doesn’t show it in the “My Certificates” list, it means you imported just a certificate but not the private key that goes with it, so OS X can’t tell that it’s truly “yours”. Certificate is the proof that the public key belongs to the Owner in the certificate or not.prove that a certificate is yours, you must have the private key that forms a matched set with the public key contained in the certificate. https://superuser.com/questions/936840/add-to-my-certificates-in-keychain-access-mac-os-10-10cn ver reference1cn ver reference2 iOS Provisioning Profile and Code Signing1.App ID(bundle identifier)App ID is Product IDApp ID应该和bundle identifier一致(Explicit)或者匹配(Wildcard)reverse-domian-name, Company ID as Prefix(com.apple.garageband)Explicit App ID: com.apple.garagebandWildcard App ID: com.apple.* 2.DeviceUDIDiTunes-&gt;Summary or Xcode-&gt;WIndow-&gt;Devices Apps signed by you or your team run only on designated development devices. Apps run only on the test devices you specify. 3.CertificateiOS certificate Development: identifies you, as a team member, in a development provisioning profile that allows apps signed by you to launch on devices. Production(Distribution): identifiesyour team or organization in a distribution provisioning profile and allows you to submit your app to the store. Only a team agent or an admin can create a distribution certificate.Individual Account:iOS Development/Production 2 Max for each. Root CertificateApple Certification Authority(Apple Root CA) -&gt; Apple Worldwide Developer Relations Cerification Authority(Subordinate CA) -&gt; AppleWWDRCA.cer(Intermediate Certificates) -&gt;Certificate for Development 4.CSR: Cerificate Signing Request5.Provisioning ProfilesApp ID, Devices, Development Certificates 如果要打包或者在真机上运行一个APP，一般要经历以下三步： 首先，需要证书对应的私钥来进行签名，用于标识这个APP是合法、安全、完整的 其次，需要指明它的App ID，并且验证Bundle ID是否与其一致； 然后，如果是真机调试，需要确认这台设备是否授权运行该APP。Provisioning Profile把这些信息全部打包在一起，方便我们在调试和发布程序打包时使用。这样，只要在不同的情况下选择不同的Provisioning Profile文件就可以了。 Provisioning Profile也分为Development和Distribution两类，有效期同Certificate一样。Distribution版本的ProvisioningProfile主要用于提交App Store审核，其中不指定开发测试的Devices（0，unlimited）。App ID为Wildcard App ID。App Store审核通过上架后，允许所有iOS设备（Deployment Target）上安装运行该App。 6.Team Provisioning Profile 7.Cetificate &amp; Signature 7.share development account amoung multi machines Xcode export development account(.developmentprofile) or PKCS12 File(.p12) Keychain Access export PKCS12File(*.p12) Short version:You can’t use it as your certificate unless you have the private key that forms a matched set with the public key that’s in the certificate. Go find where you left your private key and import that into the keychain, and Keychain Access will automatically see that it matches with the public key in that certificate and start showing that certificate in the “My Certificates” list. Long version:Certificates are public documents that you can freely distribute. They are just a way to securely link your identity (i.e. identifying information like your full name, username, email address, etc.) to your public key. Since certificates are publicly distributable, simply having a copy of a certificate is not proof you are the person named in the certificate, or that the public key in the certificate is truly your public key. To be able to prove that a certificate is yours, you must have the private key that forms a matched set with the public key contained in the certificate. If you just have a .p7b or .cer or .pem file, it most likely just contains a certificate, but not the private key that goes with it. Private keys must be kept completely secure and private and never given to anyone else. When stored on disk, they should be stored in an encrypted file that you need a passphrase to decrypt. The typical way to securely store a certificate along with the matching private key in an encrypted, password-protected file, is a .p12 (PKCS#12) file. See if you already have a .p12 file somewhere. If Keychain Access shows a certificate in your personal keychain, but it doesn’t show it in the “My Certificates” list, it means you imported just a certificate but not the private key that goes with it, so OS X can’t tell that it’s truly “yours”. You need to go find where your private key was stored when you first generated your public/private key pair. Generating a key pair is the first step toward getting a certificate. First a key pair is generated, then the public key, along with your identity information, is put into a Certificate Signing Request (a.k.a. CSR, req), and sent off to a Certificate Authority (CA) to be signed. The CA is supposed to verify your identity information and your public key, and then if it all checks out, they sign the CSR, creating a certificate. The signed certificate is sent back to you, and you have to match it back up with the private key you’d generated in the first step, in order to truly use it. Note that the role of CA is nothing terribly special. It doesn’t have to be some corporation like Verisign. Every personal computer OS contains all the software necessary to act as a CA. Keychain Access’s Certificate Assistant feature will even walk you through setting up your CA setup for your own private use. If you don’t remember generating a key pair, you were probably using some software that did it automatically for you. For example, there’s a special HTML tag that CA websites can use on their CSR web forms that tells your web browser to automatically generate a key pair and submit just the public key along with the web form. When you use Safari on such a form, the private key is stored in the user keychain for the OS X user account you’re logged into. When you use IE in Windows on such a form, the private key is stored in the Windows equivalent of that (Microsoft calls this the user’s “Certificate Store”; “store” as in “storage container” not “retail shop” :-). I can’t tell you where your private key is because I don’t know what software you used to create it, and even if I knew that, I wouldn’t know for sure where you told that software to save your private key. You’ll probably have to sleuth that out yourself. If you can’t find your private key, you may need to consider it compromised and revoke your certificate (you may need to contact your CA to do that) and start over by generating a new key pair, creating a new CSR, having a CA sign it and issue a certificate, match it up with the new private key, etc. This is kind of like realizing that you’re missing a copy of your house key, and choosing to have a locksmith rekey all your door locks just to be safe. tl;dr: Go find your private key and import it into the keychain.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Markdown Grammar]]></title>
    <url>%2F2019%2F01%2F14%2FMarkdown-grammar%2F</url>
    <content type="text"><![CDATA[一级标题二级标题三级标题四级标题1234# 一级标题## 二级标题### 三级标题#### 四级标题 列表无序列表 1 2 3123* 1* 2* 3 有序列表 1 2 31231. 12. 23. 3 引用 引用1&gt; 引用 链接图片为1![]() 链接为1[]() 斜体和粗体粗体斜体12**粗体***斜体* 表格 1 2 3 内容 内容 内容 123|1|2|3||------|:-----:|----:||内容|内容|内容| 代码框print &#39;helloworld&#39; 1`print &apos;helloworld&apos;` 1代码块 ```代码块``` 分割线 1***]]></content>
  </entry>
  <entry>
    <title><![CDATA[GitHub Memo]]></title>
    <url>%2F2018%2F11%2F06%2FGitHub-Memo%2F</url>
    <content type="text"><![CDATA[一些常用指令Merge your branch after CR:Before merge your branch to mainline, you first need to get the most recent mainline code:12345git checkout mainlinegit pullgit checkout &lt;branch_name&gt;git merge mainlinegit push After that, you can merge your branch: 1234git checkout mainlinegit pullgit merge &lt;branch_name&gt;git push .gitignore.gitignore 文件只能作用于 Untracked Files，也就是那些从来没有被 Git 记录过的文件（自添加以后，从未 add 及 commit 过的文件）。规则不生效，是因为那些 .log 文件曾经被 Git 记录过，因此 .gitignore 对它们完全无效。 从 Git 的数据库中删除对于该文件的追踪； 把对应的规则写入 .gitignore，让忽略真正生效； 提交＋推送。 取消track，保留git里的文件(保留本地文件): git update-index --assume-unchanged -path git update-index --no-assume-unchanged -path 可以取消忽略文件 但是忽略的文件多了，想找出所有被忽略的文件: git ls-files -v | grep &#39;^h\ &#39; 取消track，保留git里的文件(保留本地文件): git update-index --skip-worktree –path git update-index --no-skip-worktree –path 可以取消忽略文件 但是忽略的文件多了，想找出所有被忽略的文件: git ls-files -v | grep ^S 取消track, 删除git里的文件:git rm --cached -path 回退到上一个版本，回退到某一特定的commit快照:123git reset --hard HEAD^git reset --hard commit_idgit log //查看命令历史，以便确定要回到哪个版本，即commit_id Checkout 管理的是修改不是文件 git checkout -- readme.txt 命令git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。总之，就是让这个文件回到最近一次git commit或git add时的状态Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库 删除rm test.txt 确认要删，git commit 误删 git checkout – file 分支 查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt; 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用git log –graph命令可以看到分支合并图 命令git push origin 可以推送一个本地标签； 命令git push origin –tags可以推送全部未推送过的本地标签； 命令git tag -d 可以删除一个本地标签； 命令git push origin :refs/tags/可以删除一个远程标签 Branch Track1git branch -u origin/&lt;branch name&gt; Rebase: 合并commitgit rebase -i HEAD~3git rebase -i 3a4226b 如果git rebase 有冲突12git add .git rebase --continue 如果想放弃rebasegit rebase --abort 强制pushgit push origin master --force git add -u: 将文件的修改、文件删除，添加到暂缓区git add .: 将文件的修改、文件的新建，添加到暂缓区git add -A: 两者的结合，修改，新建，删除 远程仓库查看远程仓库信息1234# 查看关联的远程仓库的名称git remote# 查看关联的远程仓库的详细信息git remote -v 添加远程仓库的关联12# git_url 为你的远程仓库的 url，可采用 http 协议或 ssh（git） 协议git remote add origin &lt;url&gt; 删除远程仓库的关联git remote remove &lt;name&gt; 修改远程仓库的关联git remote set-url &lt;name origin/upstream&gt; &lt;newurl&gt; 远程分支创建git push -u origin mybranch 删除git push origin --delete &lt;branchName&gt; Commit大文件无法pushgit log查看提交历史git reset commit_id 撤销未被传送到远程代码库的提交 Pull Requesthttps://www.cnblogs.com/kidsitcn/p/5319282.html Git fork出来的project和上游project同步更新 问题描述：当我们在github上fork出一个项目后，如果原有的项目更新了，怎样使我们fork出来的项目和原有项目保持同步呢？怎样提交我们的代码更新呢？即怎样保持fork出的项目和上游项目保持更新，怎样创建pull request？关键步骤是使用git 的rebase命令。 步骤： 在 Fork 的代码库中添加上游代码库的 remote 源，该操作只需操作一次即可。 如: git remote add upstream https://github.scm.corp.ebay.com/montage/frontend-ui-workspace 其中 #upstream 表示上游代码库名， 该名字可以任意。 将本地的修改提交commit 在每次 Pull Request 前做如下操作，即可实现和上游版本库的同步。 3.1 ： git remote update upstream 3.2 ： git rebase upstream/{branch name} 需要注意的是在操作3.2之前，一定要切换到到{branch name}所指定的branch，如切换到develop branch 执行: git checkout develop 当然还有更简单的方法，即执行git pull upstream {branch name} Push 代码到 Github git push 然后可以去github上自己的托管空间上创建pull request。 Folk Repo 保持master始终和Upstream同步https://stackoverflow.com/questions/29049650/github-fork-your-branch-is-5-commits-ahead-how-to-clean-this-without-pushing Current GitHub Collaboration FlowRecommended method via Ry’s Git Tutorial“Never, ever rebase commits that have been pushed to a shared repository.”–Hodson, Ryan 12345678910111213git checkout -b css-editsgit commit -a -m &quot;Add CSS styles for headings and links&quot;git rebase -i master # rebase to local mastergit checkout mastergit merge --ff-only css-editsgit branch -d css-editsgit fetch origingit log master..origin/mastergit log origin/master..mastergit rebase origin/mastergit push origin master A shortcut to the git fetch origin then git rebase origin/master is to git pull --rebase. Be sure to git branch -d before rebasing origin/master, otherwise when you delete your local branch later, you’ll run into an not fully merged error like this: SSHSSH key放在本地.ssh/文件下 Create and test the ssh keyCreate a repo. Make sure there is at least one file in it (even just the README) Generate ssh key: 1ssh-keygen -t rsa -C &quot;your_email@example.com&quot; Copy the contents of the file ~/.ssh/id_rsa.pub to your SSH keys in your GitHub account settings. Test SSH key: 123ssh -T git@github.comclone the repo:git clone git://github.com/username/your-repository Modify .ssh/config file1vim ~/.ssh/config Add code like this: 123456789Host * AddKeysToAgent yes UseKeychain yes # Default GithubHost github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/github_rsa Git Commit TemplateDownload template file: https://gist.github.com/ChenX1993/38c99c3014aad0c134818b9beaa7a89b And run: 1git config --global commit.template ~/.git-commit-template.txt]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
